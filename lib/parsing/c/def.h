
#define EXTENDED_C

slice_t g_c_keyword_vals = slice_lit(
    S("auto"),
    S("break"),
    S("case"),
    S("char"),
    S("const"),
    S("continue"),
    S("default"),
    S("do"),
    S("double"),
    S("else"),
    S("enum"),
    S("extern"),
    S("float"),
    S("for"),
    S("goto"),
    S("if"),
    S("inline"),
    S("int"),
    S("long"),
    S("register"),
    S("restrict"),
    S("return"),
    S("short"),
    S("signed"),
    S("sizeof"),
    S("static"),
    S("struct"),
    S("switch"),
    S("typedef"),
    S("union"),
    S("unsigned"),
    S("void"),
    S("volatile"),
    S("while"),
    S("_Bool"),
    S("bool"),
    S("_Complex"),
    S("_Imaginary"));

enum_def(C_KeywordKind,
    C_KEYWORD_AUTO,
    C_KEYWORD_BREAK,
    C_KEYWORD_CASE,
    C_KEYWORD_CHAR,
    C_KEYWORD_CONST,
    C_KEYWORD_CONTINUE,
    C_KEYWORD_DEFAULT,
    C_KEYWORD_DO,
    C_KEYWORD_DOUBLE,
    C_KEYWORD_ELSE,
    C_KEYWORD_ENUM,
    C_KEYWORD_EXTERN,
    C_KEYWORD_FLOAT,
    C_KEYWORD_FOR,
    C_KEYWORD_GOTO,
    C_KEYWORD_IF,
    C_KEYWORD_INLINE,
    C_KEYWORD_INT,
    C_KEYWORD_LONG,
    C_KEYWORD_REGISTER,
    C_KEYWORD_RESTRICT,
    C_KEYWORD_RETURN,
    C_KEYWORD_SHORT,
    C_KEYWORD_SIGNED,
    C_KEYWORD_SIZEOF,
    C_KEYWORD_STATIC,
    C_KEYWORD_STRUCT,
    C_KEYWORD_SWITCH,
    C_KEYWORD_TYPEDEF,
    C_KEYWORD_UNION,
    C_KEYWORD_UNSIGNED,
    C_KEYWORD_VOID,
    C_KEYWORD_VOLATILE,
    C_KEYWORD_WHILE,
    C_KEYWORD__BOOL,
    C_KEYWORD_BOOL,
    C_KEYWORD__COMPLEX,
    C_KEYWORD__IMAGINARY
)

// kind == C_KEYWORD_VOID ||
// kind == C_KEYWORD_CHAR ||
// kind == C_KEYWORD_SHORT ||
// kind == C_KEYWORD_INT ||
// kind == C_KEYWORD_LONG ||
// kind == C_KEYWORD_FLOAT ||
// kind == C_KEYWORD_DOUBLE ||
// kind == C_KEYWORD_SIGNED ||
// kind == C_KEYWORD_UNSIGNED ||
// kind == C_KEYWORD__BOOL ||
// kind == C_KEYWORD__COMPLEX ||
// kind == C_KEYWORD__IMAGINARY

#define c_keyword_str_from_kind(kind) (*slice_get_T(str_t, &g_c_keyword_vals, (kind)))
#define c_keyword_is_type_specifier(kind) (\
                    kind == C_KEYWORD_VOID ||\
                    kind == C_KEYWORD_CHAR ||\
                    kind == C_KEYWORD_SHORT ||\
                    kind == C_KEYWORD_INT ||\
                    kind == C_KEYWORD_LONG ||\
                    kind == C_KEYWORD_FLOAT ||\
                    kind == C_KEYWORD_DOUBLE ||\
                    kind == C_KEYWORD_SIGNED ||\
                    kind == C_KEYWORD_UNSIGNED ||\
                    kind == C_KEYWORD__BOOL ||\
                    kind == C_KEYWORD__COMPLEX ||\
                    kind == C_KEYWORD__IMAGINARY)\

#define c_keyword_is_control(kind) (\
                    kind == C_KEYWORD_IF ||\
                    kind == C_KEYWORD_SWITCH ||\
                    kind == C_KEYWORD_FOR ||\
                    kind == C_KEYWORD_WHILE ||\
                    kind == C_KEYWORD_DO ||\
                    kind == C_KEYWORD_GOTO ||\
                    kind == C_KEYWORD_BREAK ||\
                    kind == C_KEYWORD_CONTINUE ||\
                    kind == C_KEYWORD_RETURN)


enum_def(C_OperatorAssociativity, 
    C_ASSOCIATIVITY_NONE,
    C_ASSOCIATIVITY_LEFT_TO_RIGHT,
    C_ASSOCIATIVITY_RIGHT_TO_LEFT
)

// https://en.cppreference.com/w/c/language/operator_precedence
///    C_PUNCT_LIST_ENTRY(str, kind, precedence, associativity)
#define C_OPERATOR_LIST \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_SUFF_INC, "++",   C_PUNCT_PLUS_PLUS, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_SUFF_DEC, "--",   C_PUNCT_MINUS_MINUS, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_FN_CALL, "(", C_PUNCT_LEFT_PAREN, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ARRAY_SUB, "[", C_PUNCT_LEFT_BRACKET, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ARROW, "->", C_PUNCT_ARROW, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DOT, ".", C_PUNCT_DOT, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_PREF_INC, "++",   C_PUNCT_PLUS_PLUS, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_PREF_DEC, "--",   C_PUNCT_MINUS_MINUS, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_PLUS, "+",   C_PUNCT_PLUS, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_NEG, "-",   C_PUNCT_MINUS, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LOGICAL_NOT, "!",   C_PUNCT_EXCLAMATION, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_NOT, "~",   C_PUNCT_TILDE, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_CAST, "(", C_PUNCT_LEFT_PAREN, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DEREF, "*",   C_PUNCT_STAR, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ADDRESS_OF, "&",   C_PUNCT_AMPERSAND, 2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_SIZEOF, "sizeof",  C_PUNCT_LEFT_PAREN,  2, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MULT, "*",   C_PUNCT_STAR, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DIV, "/",   C_PUNCT_SLASH, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_REM, "%",   C_PUNCT_PERCENT, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ADD, "+",   C_PUNCT_PLUS, 2, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_SUB, "-",   C_PUNCT_MINUS, 2, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_LEFT, "<<",   C_PUNCT_DOUBLE_LEFT_ANGLE, 5, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_RIGHT, ">>",   C_PUNCT_DOUBLE_RIGHT_ANGLE, 5, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LESS, "<", C_PUNCT_LEFT_ANGLE, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_GREATER, ">",   C_PUNCT_RIGHT_ANGLE, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LESS_EQUALS, "<=",   C_PUNCT_LEFT_ANGLE_EQUAL, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_GREATER_EQUALS, ">=",   C_PUNCT_RIGHT_ANGLE_EQUAL, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_EQUALS, "==",   C_PUNCT_EQUAL_EQUAL, 7, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_NOT_EQUALS, "!=",   C_PUNCT_EXCLAMATION_EQUAL, 7, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_AND, "&", C_PUNCT_AMPERSAND, 8, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_XOR, "^", C_PUNCT_CARET, 9, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_OR, "|", C_PUNCT_PIPE, 10, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LOGICAL_AND, "&&",   C_PUNCT_DOUBLE_AMPERSAND, 11, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LOGICAL_OR, "||",   C_PUNCT_DOUBLE_PIPE, 12, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_TERN_COND, "?:", C_PUNCT_QUESTION, 13, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ASSIGN, "=", C_PUNCT_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_LEFT_ASSIGN, "<<=", C_PUNCT_DOUBLE_LEFT_ANGLE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_RIGHT_ASSIGN, ">>=",  C_PUNCT_DOUBLE_RIGHT_ANGLE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_PLUS_ASSIGN, "+=",   C_PUNCT_PLUS_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MINUS_ASSIGN, "-=",   C_PUNCT_MINUS_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MULT_ASSIGN, "*=",   C_PUNCT_STAR_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DIV_ASSIGN, "/=",   C_PUNCT_SLASH_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_REM_ASSIGN, "%=",   C_PUNCT_PERCENT_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_AND_ASSIGN, "&=",   C_PUNCT_AMPERSAND_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_XOR_ASSIGN, "^=",   C_PUNCT_CARET_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_OR_ASSIGN, "|=",   C_PUNCT_PIPE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_COMMA, ",",   C_PUNCT_COMMA, 15, C_ASSOCIATIVITY_LEFT_TO_RIGHT), 

// binop
#define C_OPERATOR_BINOP_LIST \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ARROW, "->", C_PUNCT_ARROW, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DOT, ".", C_PUNCT_DOT, 1, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MULT, "*",   C_PUNCT_STAR, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DIV, "/",   C_PUNCT_SLASH, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_REM, "%",   C_PUNCT_PERCENT, 3, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ADD, "+",   C_PUNCT_PLUS, 2, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_SUB, "-",   C_PUNCT_MINUS, 2, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_LEFT, "<<",   C_PUNCT_DOUBLE_LEFT_ANGLE, 5, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_RIGHT, ">>",   C_PUNCT_DOUBLE_RIGHT_ANGLE, 5, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LESS, "<", C_PUNCT_LEFT_ANGLE, 6 C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_GREATER, ">",   C_PUNCT_RIGHT_ANGLE, 6 C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LESS_EQUALS, "<=",   C_PUNCT_LEFT_ANGLE_EQUAL, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_GREATER_EQUALS, ">=",   C_PUNCT_RIGHT_ANGLE_EQUAL, 6, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_EQUALS, "==",   C_PUNCT_EQUAL_EQUAL, 7, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_NOT_EQUALS, "!=",   C_PUNCT_EXCLAMATION_EQUAL, 7, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_AND, "&", C_PUNCT_AMPERSAND, 8, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_XOR, "^", C_PUNCT_CARET, 9, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_OR, "|", C_PUNCT_PIPE, 10, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LOGICAL_AND, "&&",   C_PUNCT_DOUBLE_AMPERSAND, 11, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_LOGICAL_OR, "||",   C_PUNCT_DOUBLE_PIPE, 12, C_ASSOCIATIVITY_LEFT_TO_RIGHT), \
    \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_ASSIGN, "=", C_PUNCT_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_LEFT_ASSIGN, "<<=", C_PUNCT_DOUBLE_LEFT_ANGLE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_SHIFT_RIGHT_ASSIGN, ">>=",  C_PUNCT_DOUBLE_RIGHT_ANGLE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_PLUS_ASSIGN, "+=",   C_PUNCT_PLUS_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MINUS_ASSIGN, "-=",   C_PUNCT_MINUS_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_MULT_ASSIGN, "*=",   C_PUNCT_STAR_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_DIV_ASSIGN, "/=",   C_PUNCT_SLASH_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_REM_ASSIGN, "%=",   C_PUNCT_PERCENT_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_AND_ASSIGN, "&=",   C_PUNCT_AMPERSAND_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_XOR_ASSIGN, "^=",   C_PUNCT_CARET_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \
    C_OPERATOR_LIST_ENTRY(C_OPERATOR_BIT_OR_ASSIGN, "|=",   C_PUNCT_PIPE_EQUAL, 14, C_ASSOCIATIVITY_RIGHT_TO_LEFT), \


// ///    C_PUNCT_LIST_ENTRY(str, kind, precedence, associativity)
// #define C_PUNCT_LIST 
// C_PUNCT_LIST_ENTRY("<<=",  C_PUNCT_DOUBLE_LEFT_ANGLE_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY(">>=",  C_PUNCT_DOUBLE_RIGHT_ANGLE_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),

// C_PUNCT_LIST_ENTRY("+=",   C_PUNCT_PLUS_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("-=",   C_PUNCT_MINUS_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("*=",   C_PUNCT_STAR_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("/=",   C_PUNCT_SLASH_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("%=",   C_PUNCT_PERCENT_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("<=",   C_PUNCT_LEFT_ANGLE_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY(">=",   C_PUNCT_RIGHT_ANGLE_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("==",   C_PUNCT_EQUAL_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("!=",   C_PUNCT_EXCLAMATION_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("&=",   C_PUNCT_AMPERSAND_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("^=",   C_PUNCT_CARET_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),
// C_PUNCT_LIST_ENTRY("|=",   C_PUNCT_PIPE_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),

// C_PUNCT_LIST_ENTRY("++",   C_PUNCT_PLUS_PLUS, 1, C_PRECEDENCE_LEFT_TO_RIGHT),
// C_PUNCT_LIST_ENTRY("--",   C_PUNCT_MINUS_MINUS, 1, C_PRECEDENCE_LEFT_TO_RIGHT),
// C_PUNCT_LIST_ENTRY("<<",   C_PUNCT_DOUBLE_LEFT_ANGLE, 1, C_PRECEDENCE_LEFT_TO_RIGHT),
// C_PUNCT_LIST_ENTRY(">>",   C_PUNCT_DOUBLE_RIGHT_ANGLE, 1, C_PRECEDENCE_LEFT_TO_RIGHT),
// C_PUNCT_LIST_ENTRY("&&",   C_PUNCT_DOUBLE_AMPERSAND,),
// C_PUNCT_LIST_ENTRY("||",   C_PUNCT_DOUBLE_PIPE,),

// C_PUNCT_LIST_ENTRY("##",   C_PUNCT_DOUBLE_HASH,),
// C_PUNCT_LIST_ENTRY("#",   C_PUNCT_HASH,),
// C_PUNCT_LIST_ENTRY("...",   C_PUNCT_ETC,),

// C_PUNCT_LIST_ENTRY("(",   C_PUNCT_LEFT_PAREN,),
// C_PUNCT_LIST_ENTRY(")",   C_PUNCT_RIGHT_PAREN,),
// C_PUNCT_LIST_ENTRY("[",   C_PUNCT_LEFT_BRACKET,),
// C_PUNCT_LIST_ENTRY("]",   C_PUNCT_RIGHT_BRACKET,),
// C_PUNCT_LIST_ENTRY("{",   C_PUNCT_LEFT_BRACE,),
// C_PUNCT_LIST_ENTRY("}",   C_PUNCT_RIGHT_BRACE,),
// C_PUNCT_LIST_ENTRY("<",   C_PUNCT_LEFT_ANGLE,),
// C_PUNCT_LIST_ENTRY(">",   C_PUNCT_RIGHT_ANGLE,),
// C_PUNCT_LIST_ENTRY("->",   C_PUNCT_ARROW,),
// C_PUNCT_LIST_ENTRY(".",   C_PUNCT_DOT,),
// C_PUNCT_LIST_ENTRY("&",   C_PUNCT_AMPERSAND,),
// C_PUNCT_LIST_ENTRY("~",   C_PUNCT_TILDE,),
// C_PUNCT_LIST_ENTRY(",",   C_PUNCT_COMMA, 15, C_PRECEDENCE_LEFT_TO_RIGHT),
// C_PUNCT_LIST_ENTRY(";",   C_PUNCT_SEMI_COLON,),
// C_PUNCT_LIST_ENTRY(":",   C_PUNCT_COLON,),

// C_PUNCT_LIST_ENTRY("?",   C_PUNCT_QUESTION,),

// C_PUNCT_LIST_ENTRY("+",   C_PUNCT_PLUS,),
// C_PUNCT_LIST_ENTRY("-",   C_PUNCT_MINUS,),
// C_PUNCT_LIST_ENTRY("*",   C_PUNCT_STAR,),
// C_PUNCT_LIST_ENTRY("/",   C_PUNCT_SLASH,),
// C_PUNCT_LIST_ENTRY("%",   C_PUNCT_PERCENT,),
// C_PUNCT_LIST_ENTRY("!",   C_PUNCT_EXCLAMATION,),
// C_PUNCT_LIST_ENTRY("^",   C_PUNCT_CARET,),
// C_PUNCT_LIST_ENTRY("|",   C_PUNCT_PIPE,),

// C_PUNCT_LIST_ENTRY("=",   C_PUNCT_EQUAL, 14, C_PRECEDENCE_RIGHT_TO_LEFT),

// #ifdef EXTENDED_C
// C_PUNCT_LIST_ENTRY("@", C_PUNCT_AT, 1, C_PRECEDENCE_NONE),
// #endif // EXTENDED_C

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    
    
    



    

    
    
    
    
    
    
    
    

    

#ifdef EXTENDED_C
#endif // EXTENDED_C


slice_t g_c_punct_vals = slice_lit(
    S("<<="),
    S(">>="),

    S("+="),
    S("-="),
    S("*="),
    S("/="),
    S("%="),
    S("<="),
    S(">="),
    S("=="),
    S("!="),
    S("&="),
    S("^="),
    S("|="),

    S("++"),
    S("--"),
    S("<<"),
    S(">>"),
    S("&&"),
    S("||"),

    S("##"),
    S("#"),
    S("..."),


    S("("),
    S(")"),
    S("["),
    S("]"),
    S("{"),
    S("}"),
    S("<"),
    S(">"),
    S("->"),
    S("."),
    S("&"),
    S("~"),
    S(","),
    S(";"),
    S(":"),
    // # S("::"),

    S("?"),

    S("+"),
    S("-"),
    S("*"),
    S("/"),
    S("%"),
    S("!"),
    S("^"),
    S("|"),

    S("="),

#ifdef EXTENDED_C
    S("@")
#endif // EXTENDED_C
    );



enum_def(C_PunctKind,
    C_PUNCT_DOUBLE_LEFT_ANGLE_EQUAL,
    C_PUNCT_DOUBLE_RIGHT_ANGLE_EQUAL,

    C_PUNCT_PLUS_EQUAL,
    C_PUNCT_MINUS_EQUAL,
    C_PUNCT_STAR_EQUAL,
    C_PUNCT_SLASH_EQUAL,
    C_PUNCT_PERCENT_EQUAL,
    C_PUNCT_LEFT_ANGLE_EQUAL,
    C_PUNCT_RIGHT_ANGLE_EQUAL,
    C_PUNCT_EQUAL_EQUAL,
    C_PUNCT_EXCLAMATION_EQUAL,
    C_PUNCT_AMPERSAND_EQUAL,
    C_PUNCT_CARET_EQUAL,
    C_PUNCT_PIPE_EQUAL,

    C_PUNCT_PLUS_PLUS,
    C_PUNCT_MINUS_MINUS,
    C_PUNCT_DOUBLE_LEFT_ANGLE,
    C_PUNCT_DOUBLE_RIGHT_ANGLE,
    C_PUNCT_DOUBLE_AMPERSAND,
    C_PUNCT_DOUBLE_PIPE,

    C_PUNCT_DOUBLE_HASH,
    C_PUNCT_HASH,
    C_PUNCT_ETC,

    C_PUNCT_LEFT_PAREN,
    C_PUNCT_RIGHT_PAREN,
    C_PUNCT_LEFT_BRACKET,
    C_PUNCT_RIGHT_BRACKET,
    C_PUNCT_LEFT_BRACE,
    C_PUNCT_RIGHT_BRACE,
    C_PUNCT_LEFT_ANGLE,
    C_PUNCT_RIGHT_ANGLE,
    C_PUNCT_ARROW,
    C_PUNCT_DOT,
    C_PUNCT_AMPERSAND,
    C_PUNCT_TILDE,
    C_PUNCT_COMMA,
    C_PUNCT_SEMI_COLON,
    C_PUNCT_COLON,

    // # C_PUNCT_DOUBLE_COLON,

    C_PUNCT_QUESTION,

    C_PUNCT_PLUS,
    C_PUNCT_MINUS,
    C_PUNCT_STAR,
    C_PUNCT_SLASH,
    C_PUNCT_PERCENT,
    C_PUNCT_EXCLAMATION,
    C_PUNCT_CARET,
    C_PUNCT_PIPE,

    C_PUNCT_EQUAL,

#ifdef EXTENDED_C
    C_PUNCT_AT,
#endif // EXTENDED_C
    C_PUNCT_COUNT,
)

#define c_punct_str_from_kind(kind) (*slice_get_T(str_t, &g_c_punct_vals, (kind)))

#define C_TYPE_LIST \
    ENT(U8), \
    ENT(U16), \
    ENT(U32), \
    ENT(U64), \
    ENT(I8), \
    ENT(I16), \
    ENT(I32), \
    ENT(I64), \
    ENT(VOID), \
    ENT(BOOL), \
    ENT(CHAR), \
\
    ENT(SHORT), \
    ENT(USHORT), \
\
    ENT(INT), /* "" */ \
    ENT(LONG), /* "l" */ \
    ENT(LLONG), /* "ll" */ \
    ENT(UINT), /* "u" */ \
    ENT(ULONG), /* "lu" */ \
    ENT(ULLONG) /* "llu" */ \

typedef enum C_PrimitiveType C_PrimitiveType;
enum C_PrimitiveType { 
    #define ENT(T) C_PRIMITIVE_TYPE_##T
    C_TYPE_LIST
    #undef ENT
};


#define C_OPERATOR_LIST_ENTRY(op_kind, sym, punct_kind, prec, assoc) op_kind

enum_def(C_OperatorKind,
    C_OPERATOR_INVALID,

    C_OPERATOR_LIST

    C_OPERATOR_COUNT
)

#undef C_OPERATOR_LIST_ENTRY


typedef u8_t C_OperatorPrecedence;

struct_def(C_OperatorData, {
    C_OperatorPrecedence precedence;
    C_OperatorAssociativity associativity;
})

#define C_OPERATOR_LIST_ENTRY(op_kind, sym, punct_kind, prec, assoc) \
    [op_kind] = (C_OperatorData) { \
        .precedence = prec, \
        .associativity = assoc, \
    }

C_OperatorData
g_c_operators[C_OPERATOR_COUNT] = {
    C_OPERATOR_LIST
};
#undef C_OPERATOR_LIST_ENTRY


#define C_OPERATOR_LIST_ENTRY(op_kind, sym, punct_kind, prec, assoc) \
    [punct_kind] = op_kind

C_OperatorKind
g_c_punct_to_binop_table[C_PUNCT_COUNT] = {
    C_OPERATOR_LIST
};
#undef C_OPERATOR_LIST_ENTRY
    

#define C_MAX_PRECEDENCE 15

INLINE
C_OperatorPrecedence
c_operator_precedence(C_OperatorKind op_kind) {
    return g_c_operators[op_kind].precedence;
}
INLINE
C_OperatorAssociativity
c_operator_associativity(C_OperatorKind op_kind) {
    return g_c_operators[op_kind].associativity;
}

INLINE
C_OperatorKind
c_punct_kind_to_binop_kind(C_PunctKind punct_kind) {
    return g_c_punct_to_binop_table[punct_kind];
}




typedef str_t C_Symbol;
typedef hashmap_T(C_Symbol, C_SymbolData) C_SymbolTable;


struct_def(C_PathName, {
    str_t path;
})

